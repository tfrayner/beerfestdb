Operations During a Running Festival
====================================

There are a few scripts used to manage the database during a
festival. The scripts are all in the project "util" subdirectory but
should be directly accessible via the command line PATH. In every case
you can run the script with either "-h" or "--help" to get some idea
of the arguments the script is expecting. In approximate order of
usage, the scripts are:

1. load_data.pl
---------------

This is the main data loading script. It's very flexible but not
particularly well documented. With luck you may not need this during
the festival proper, but in reality this will probably become
necessary at some stage (e.g. during a beer re-order). The script can
be used to add or modify various non-festival specific details
(e.g. company and product info), but here we are more concerned with
how it is used during the festival.

Depending on how big and complex the festival is, one can load product
data in one of two ways: (a) directly linking the product to the
festival, in effect saying "this product is at this festival", without
necessarily specifying the quantities involved, or (b) linking the
product to a given order batch, with quantities specified. The latter
approach is very much preferable if sufficient information is
available on what has been ordered. To use the 'order batch' approach,
make sure you include a column in the loaded data file named "order
batch name".

Since this script is so powerful, a mechanism has been created to
protect various object types from being changed at any given time. In
effect, we treat different tables as containing controlled
vocabularies depending on what we're trying to accomplish. This is
controlled from within the main beerfestdb_web.yml config file. The
"protected_classes" setting gives a listing of the object types which
cannot be added or modified by the load_data.pl script. If you are
trying to make a change but are blocked from doing so with a
"Protection error", you can temporarily comment out the relevant
object type to bypass the error (but be aware that the error may be
warning you of a genuine problem, e.g. mis-spelling of a given beer
name). 

During the festival only object types likely to need
addition/modification are as follows: ProductOrder, OrderBatch. Other
possible object types would be FestivalProduct, Gyle, CaskManagement,
Cask. Finally, it's conceivable but unlikely that both Company and
Product might need additions (if, say, the reorder gets in some
genuinely new beers) but in practice I think that this will almost
never happen.

Typical script usage:

> load_data.pl -i my_data_to_load.csv

See example_data/reorder1.csv for an example of a file which might be
used to load beer reorder data. 

Other examples of files suitable for use with this script are
cider_mead.csv, october_2010_beer.txt, summer_2005_beer.txt,
winter_2010_cider.txt and winter_2010_beer.txt, all of which
illustrate how one might link products directly to a festival without
using the product order mechanism. The producers.csv file shows
another possible use of the script: to change properties associated
with companies (in this case, their geographic locations), rather than
festival-specific attributes.

2. preload_festival_casks.pl
----------------------------

This is a relatively simple script which creates "virtual casks" from
the product order information for a festival; in effect, this the set
of casks which we expect to be delivered. This allows for some
planning tasks to be completed prior to delivery (e.g., printing of
cask labels, stillage planning etc.). Typical usage (no arguments
required):

> preload_festival_casks.pl

You can run this script as many times as you like; if you make changes
to the product orders, simply rerun the script to have those changes
correctly reflected in the virtual cask listings.

3. upload_beerlist.pl
---------------------

Upload the details and status of all the products at the festival to
the main public festival web site. Again, usage is simple:

> upload_beerlist.pl

The script will ask you for a username and password. This will be your
department account that you would use to log into the beerfestdb
website. Since this script never writes to the database it's possible
to run this using any user account. Again, you can run this script as
often as you might like.

4. dump_to_template.pl
----------------------

This is the main script used to generate latex output files from the
database. It fills out template files (in the "util/templates" project
directory) using information from the database organised by various
levels of abstraction ("dump class"): cask, cask_management, gyle,
product, product_order or distributor. Typical usage:

# For cask end signs:
> dump_to_template.pl -t templates/cask_end_template.tt2 \
                      -l images/cake.png -o gyle > cask_ends.tex

# use -o gyle for summer festival -- this makes it sort nicely by product type

# for smaller festivals that have less robust documentation throughout
#  proceedings (octoberfest we're lookin' at you), use -o product so
#  nothing will be missed out.

# For dip sheets:
> dump_to_template.pl -t templates/dip_sheet_template.tt2 -o cask > dip_sheets.tex

# For cask graveyard signs:
> dump_to_template.pl -t templates/cask_graveyard.tt2 -o distributor > graveyard.tex

The templates themselves know which level(s) they can be used with, so
if you go wrong you'll just get an error message with a (hopefully
helpful) suggestion on how to fix the problem. Some of the templates
contain links out to specific image files; others use the value passed
by the "-l" option ("--logo") to add a festival-specific
logo. Currently available template files include the following:

 - bar_price_list.tt2: A set of price list tables that can be used at
   the bar, typically as a single sheet of laminated card or
   paper. Dump class: gyle.

 - cask_end_template.tt2: The cask end signs, with tweaks for
   different product categories (cider/wine/mead etc.). Dump classes:
   gyle or product. Expects a logo file.

 - cask_graveyard.tt2: A set of cask graveyard signs, organised by
   distributor. Dump class: distributor.

 - cask_labels.tt2: Cask labels, obviously. These are currently set up
   for a 3x7 label grid and will attempt to generate a barcode based
   on cask festival number; the barcodes are somewhat error prone and
   so if this fails badly then cask_labels_no_barcode.tt2 is provided
   as a backup. Dump class: cask_management. Note that you will need
   to run pdflatex with the -shell-escape argument to get this to
   work.

 - delivery_checklist.tt2: A set of delivery checklists ordered by
   distributor. Dump class: distributor.

 - dip_sheet_template.tt2: Dip sheets for each stillage. Note that if
   you regenerate dip sheets during the festival then the values
   stored in the database will be entered into the sheets, so
   cellarers don't need to copy their data across. Dump class: cask.

 - jacket_labels.tt2: Like cask_labels, but simpler; these are
   designed to provide a visual cue as to which cask is hiding under a
   cooling jacket. Typically you only need one jacket label per product
   rather than per cask. Dump class: gyle.

There is a handful of other templates, but they are typically used in
the run-up to the festival and so can be ignored for the moment.

5. dump_to_oodoc.pl (optional)
-------------------

This script generates OpenOffice documents using an input template
document to define a set of document styles which are used to render
the various data fields. In principle this works in much the same way
as dump_to_template.pl. The output files of the script can also be
used as an input template; it is the styles embedded in the document
which are important. See the file example_data/programme_notes.odt
for an example template document. Typical usage:

> dump_to_oodoc.pl -t programme_notes.odt -f output_file.odt 

6. update_cask_details.pl
-------------------------

A script used to set the status and stillage position information for
sets of casks on a given stillage. Please see the "-h" help
documentation for details on the file format, which I won't reiterate
here (FIXME we need some example_data). Note that by default this
script will refuse to move casks between stillages, which in practice
means that a given run of the script is restricted to the casks on
just one stillage. Typical usage:

> update_cask_details.pl -f cask_details_file.csv

7. load_dips.pl
---------------

A script used to load dip data; the input format is simple: two
columns separated by a tab character; the first column is the
festival cask ID, and the second the remaining volume in gallons:

1    3
2    0.5
3    8
4    9
5    0

(FIXME also needs example_data)
If a cask is not present in the list it is assumed unchanged since the
previous dip. The script will ask you which dipping time these data
should be stored against; they will overwrite anything previously
stored for that time in the database, so it's not a bad idea to keep
the input files somewhere as a temporary backup in case of
mistakes. Typical script usage:

> load_dips.pl -i my_dip_datafile.txt

Typical Festival Workflow
=========================

It may be worth referring to this page for a broad overview of the
dependencies on data input/output before and during a given festival:

http://sourceforge.net/apps/mediawiki/beerfestdb/index.php?title=Suggested_process

If we assume you start the festival with a database containing a set
of beers specified as having been ordered, the following steps will be
necessary:

# Update the expected cask listings.
> preload_festival_casks.pl

# Generate cask labels and print them out.
> dump_to_template.pl -t templates/cask_labels.tt2 -o cask_management > cask_labels.tex
> pdflatex -shell-escape cask_labels.tex

# Receive deliveries, put labels on casks, make a note of
# discrepancies. Record the successful deliveries using the beerfestdb
# web site (product order pages). The most efficient way to do this is
# probably to navigate to the product order pages, click on the first
# "Arrived" checkbox, use <space> to switch it from "no" to "yes" and
# hit <return> to move to the next row. By alternating <space> and
# <return> you can toggle the arrival state for the whole batch quite
# quickly.

# For unexpected cask deliveries create new festival products
# directly ("products received"), add a gyle record and the individual
# casks. One hopes there will not be too many of these, although if it
# gets out of hand there's always the load_data.pl script.

# To correct discrepancies (the most common example is ABV
# differences) after a product is marked "arrived", go to the
# festival products tab. Find the product, go to its page, and then
# to the relevant tab:

#   To correct ABV, click Gyle, then update "gyle ABV". This leaves
#   the "advertised ABV unchanged at the level of product, but updates
#   at the level of festival roduct so that cask end signs are
#   accurate.

#   If extra casks come, or the sizes differ from the order, add casks
#   in the Cask tab. Note that cask IDs must be added manually -- just
#   pick an unused number (the system won't allow an in-use
#   number). Put "auto-generated" as the gyle.

# Assign casks to stillages. This can either be done via the web page,
# or using the update_cask_details.pl script. In the latter case,
# create a tab-delimited file with two columns: cask_festival_id
# (i.e. the cask number as on its label) and stillage_location (the
# text as in the "casks by stillage" list in the web interface). Run
# this script (note that the -a option allows casks to move between
# stillages; usually you will omit this option): 
> update_cask_details.pl -a -f the_tab_delimited_file.txt

# Generate dip sheets:
> dump_to_template.pl -t templates/dip_sheet_template.tt2 -o cask > dip_sheets.tex
> pdflatex dip_sheets.tex

# Enter the sale prices for each beer at the festival. This is done
# using the web interface, under "Products received"; prices must
# currently be entered in pence (i.e. 320 for a GBP3.20 pint).

# Generate cask end signs:
> dump_to_template.pl -t templates/cask_end_template.tt2 -o gyle -l images/cake.png > cask_ends.tex
> pdflatex cask_ends.tex 

# On the first day of the festival, before opening, run the web site
# upload script to change the status flags from "Ordered/Arrived" to "X
# amount left":
> upload_beerlist.pl

# After the session, do the dips and generate a dip data file as
# described above. Load the data and update the public web pages:
> load_dips.pl -i dip_data_file.txt
> upload_beerlist.pl

# If you need to add a reorder you will most likely want to use the
# load_data.pl script. There's an example data file in
# example_data/reorder1.csv.
> load_data.pl -i reorder1.csv

# To complete the reorder load, you will need to do the following in
# the web interface:
# (a) Set the products as "arrived" in the relevant product order batch pages;
# (b) Set the sale prices in the festival "Products received" page.

