\name{analyseData}
\alias{analyseData}
\title{
An example of a turn-key analysis function.
}
\description{
This function takes the dip data frame generated by
\code{getFestivalData()} and writes out a set of PDFs illustrating some
of the more interesting features of the sales data.
}
\usage{
analyseData(cp)
}
\arguments{
  \item{cp}{
    The data frame generated by \code{getFestivalData()}.
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function(cp) {

    ## Currently a dumping ground for some thoughts.
    cp <- cp[ cp$is_condemned == 0, ]
    
    cp$abv_class <- cut(cp$nominal_abv, breaks=c(2,3.5,4,4.5,5,7,12))
    levels(cp$abv_class) <- gsub('\\(|\\]', '', gsub(',',' - ',levels(cp$abv_class)))
    
    w  <- colnames(cp) == 'cask_volume' | grepl('^dip\\.', colnames(cp))
    colnames(cp)[w][-1] <- gsub('^dip\\.', '', colnames(cp)[w][-1])

    stopifnot( colnames(cp)[w][1] == 'cask_volume' )

    pd <- cp[,w][,-sum(w)] - cp[,w][,-1]
    colnames(pd) <- colnames(cp)[w][-1]
    stopifnot( all(pd >= 0 ) )

    plotToFile( 'total_beer_sales.pdf', plotTotalBeerSales, pd )

    plotToFile( 'sales_by_region.pdf', plotSalesRate, cp, 'region', w=w )
    plotToFile( 'sales_by_stillage.pdf', plotSalesRate, cp, 'stillage', w=w )
    plotToFile( 'sales_by_abv_class.pdf', plotSalesRate, cp, 'abv_class', w=w )

    cols <- brewer.pal(9, 'Set1')
    plotToFile( 'beers_per_region.pdf', drawPie,
               cp, 'region', cols=cols, cex=1.25 )
    plotToFile( 'beers_per_style.pdf', drawPie,
               cp, 'style', cols=cols, cex=1.25 )

    dp <- aggData( cp, 'style', w )
    plotToFile( 'clusters_by_style.pdf', heatmap.2, as.matrix(dp/dp[,1]),
               dendrogram='row', key=FALSE, margins=c(5,12), trace='none',
               Colv=FALSE, lhei=c(2, 10), lwid=c(2, 5), cexRow=1.5, cexCol=1.5)

    ## Drop the last part of the festival (1/4 rounded up) since it'll
    ## usually be non-linear by then.
    dn <- ceiling((ncol(dp)-1)/4) - 1
    drop <- colnames(dp)[ (ncol(dp)-dn):ncol(dp) ]

    plotToFile( 'sale_profile_by_style.pdf', plotModelCoeffs, cp, 'style', drop=drop, w=w)
    plotToFile( 'sale_profile_by_abv_class.pdf', plotModelCoeffs, cp, 'abv_class', drop=drop, w=w)
    plotToFile( 'sale_profile_by_region.pdf', plotModelCoeffs, cp, 'region', drop=drop, w=w)
    plotToFile( 'sale_profile_by_stillage.pdf', plotModelCoeffs, cp, 'stillage', drop=drop, w=w)

    ## Probably don't want to publish this until we're happier with
    ## the algorithm.
    prodrank <- rankProducts( cp, drop, w )
    write.csv(prodrank, file='product_sales_ranking.csv', row.names=FALSE)

    invisible(prodrank)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
